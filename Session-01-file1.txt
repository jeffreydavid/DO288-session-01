

Fork below repository:-
https://github.com/RedHatTraining/DO288-apps

Then git clone to student's home directory
git clone httpd://github.com/cprakash2118/DO288-apps

lab-config 


#####
Example of appliaction deployment using SCM (github) 

Fork below repository:-
https://github.com/cprakash2118/repo01


# Check the image in openshift internal registry.
$ oc get is -n openshift | grep nodejs 
$ oc get istag -n openshift | grep nodejs

# To download the image from RedHat portal.
RedHat container image registry - registry.redhat.io 
https://catalog.redhat.com/software/containers/search?q=ubi


$ oc new-app --name myapp01  nodejs:16-ubi8~https://github.com/cprakash2118/repo01 --as-deployment-config --build-env npm_config_registry=http://${RHT_OCP4_NEXUS_SERVER}/repository/nodejs

$ oc get pods 
$ oc logs -f bc/myapp01 
Note: Error - Need code correction.

$ git clone https://github.com/cprakash2118/repo01
$ cd repo01 
$ python  -m  json.tool  package.json
$ vim package.json 
$ git add .
$ git commit -m "Update"
$ git push 
$ oc start-build myapp01 
$ oc get pods 
$ oc logs -f bc/myapp01 


Note: Below command is an example of deploying application using registry and SCM (github.com).

 oc new-app --name myapp01  nodejs:16-ubi8~https://github.com/cprakash2118/repo01 --as-deployment-config --build-env npm_config_registry=http://${RHT_OCP4_NEXUS_SERVER}/repository/nodejs
 
 or
 
 oc new-app --name myapp01 -i nodejs:16-ubi8   https://github.com/cprakash2118/repo01 --as-deployment-config --build-env npm_config_registry=http://${RHT_OCP4_NEXUS_SERVER}/repository/nodejs
 
 or 
 
 
  oc new-app --name myapp01 --image-stream nodejs:16-ubi8   https://github.com/cprakash2118/repo01 --as-deployment-config --build-env npm_config_registry=http://${RHT_OCP4_NEXUS_SERVER}/repository/nodejs
  
 ##############
 
 oc new-app --name myapp02 quay.io/cprakash2118/ubi8-apache-java-unzip-image01
 or 
 oc new-app --name myapp02 --docker-image quay.io/cprakash2118/ubi8-apache-java-unzip-image01
  
  
 oc new-app --as-deployment-config --name hello -i httpd --code http://github.com/cprakash2118/web
 
#################################
Session-02 (day-02):-
Recap:-

### Deploy applications on OCP cluster:-
1) new-app 
2) template 

1) new-app approche 

#type-01 
Note: Build application outside OCP cluster (3rd party provides build as image) and directly using image we can deploy application.

$ oc new-project project01
$ oc get all 
$ oc new-app --name myapp01 quay.io/cprakash2118/ubi8-apache-java-unzip-image01
or
$ oc new-app --name myapp01 --docker-image quay.io/cprakash2118/ubi8-apache-java-unzip-image01


#Type-02 
Note: Build application within the OCP cluster and deploy also in same OCP cluster.
$ oc new-project project02 
$ oc get all 
$ oc new-app --name myapp02 --as-deployment-config -i httpd https://github.com/cprakash2118/web 

Note: Here image (Apache image - httpd enabled, web application is simple html based app "index.html").


****
--as-deployment-config
--image-stream
--context-dir 

Consider your complete product/application (DO288-apps).
fork the DO288-apps from https://github.com/RedHatTraining/DO288-apps

#################
$git clone https://github.com/RedHatTraining/DO288-apps
$ cd DO288-apps
$ git branch (main/master)
$ git checkout master/main   (It's realdy updated or it will update few data).
$ git checkout -b project-01-ubi-sleep 
$ git branch 
* project-01-ubi-sleep
  main
* git push -u origin project-01-ubi-sleep  
username:
password: 
$ pwd
<path>/DO288-apps/
$ ls -ld ubi-sleep 
NOte: --- Modify the component (ubi-sleep)
 - Date - 24-March-2023 
 - then git commit 
 - then git push 
 
  oc new-app --name echo-build11 --as-deployment-config   https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps#docker-build11 --context-dir ubi-sleep


Once this is done 
mkdir /home/student/work02 
$ git clone https://github.com/cprakash2118/DO288-apps
$ cd DO288-apps
$ oc new-app --name echo-build11-main --as-deployment-config   https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps#docker-build11 --context-dir ubi-sleep

This application different and over application different.



###########
To get the OCP cluster web console 
$ oc whoami --show-console 

$ oc get route -n openshift-console 

Check logs and events about he pod/deployment/deployment-config & buildConfig 

$ oc logs <pod_name>
$ oc logs -f bc/bc_name 
$ oc get all
$ oc get svc 
$ oc get dc 
$ oc get bc 
$ oc get is 
$ oc get is -n openshift | grep php 
$ oc get istag -n openshift | grep php 

############################
Designing Containerized Applications for OpenShift

Image 
Dockerfile 
Source2Image (S2I)

S2I and Dockerfile/Conatinerfile 

UBI example 
https://catalog.redhat.com/software/containers/search?q=UBI
https://catalog.redhat.com/software/containers/ubi8/ubi/5c359854d70cc534b3a3784e




Example:
###################

$ podman pull quay.io/redhattraining/php-hello-dockerfile
$ podman images
$ podman tag quay.io/redhattraining/php-hello-dockerfile quay.io/<your_quayID>/redhattraining-php-hello-dockerfile
$ podman push quay.io/<your_quayID>/redhattraining-php-hello-dockerfile

Example: quayID = cprakash2118
$ podman pull quay.io/redhattraining/php-hello-dockerfile
$ podman images
$ podman tag quay.io/redhattraining/php-hello-dockerfile quay.io/cprakash2118/redhattraining-php-hello-dockerfile
$ podman push quay.io/cprakash2118/redhattraining-php-hello-dockerfile
  Note: It will not work, as required credentials.
  
podman login quay.io
podman push quay.io/cprakash2118/redhattraining-php-hello-dockerfile 
podman logout 


###
How to do the same for OCP cluster.

$ cat ${XDG_RUNTIME_DIR}/containers/auth.json

$ oc import-image myimage cprakash2118/redhattraining-php-hello-dockerfile --from=quay.io/cprakash2118/redhattraining-php-hello-dockerfile --confirm

Above command will not work ? (Because credentils issue)

$ podman login quay.io 
user_name:
passwd: 

$ cat ${XDG_RUNTIME_DIR}/containers/auth.json

$ oc create secret generic quay-registry --from-file .dockerconfigjson=${XDG_RUNTIME_DIR}/containers/auth.json --type kubernetes.io/dockerconfigjson
$ oc secrets link builder quay-registry

$ oc import-image myimage cprakash2118/redhattraining-php-hello-dockerfile --from=quay.io/cprakash2118/redhattraining-php-hello-dockerfile --reference-policy local --confirm

$ oc get is 
$ oc get istag 

## NOw deploying the application using image (download from Private registry)
NOte: 1st Create secret then link secret_name to builder serviceAccount then use "oc import-image" and tag your image from private registry.


Case-01 (Only image based application deployment)
$ oc new-app --name  web-app01  myimage


Case-02 (Application deployment using image and code repo)
oc new-app --name web-app02 --as-deployment-config -i myimage https://github.com/cprakash2118/web 
or
oc new-app --name web-app02 --as-deployment-config myimage~https://github.com/cprakash2118/web




############
S2I -
https://github.com/cprakash2118/repo02

Fork this repo.

#### Deploying application via S2I 
Image - 
$ oc new-project s2i-project-demo 
$ oc get route -n openshift-image-registry
# INternal OpenSHift registry 
$ oc whoami 
Admin:kube (Use = kubeadmin)
$ oc whoami -t 
$ podman login <route_output_of_above_command> 
User:
pass: 
$ oc get is -n openshift | grep httpd 
$ cat ${XDG_RUNTIME_DIR}/containers/auth.json

$ oc create secret generic quay-registry --from-file .dockerconfigjson=${XDG_RUNTIME_DIR}/containers/auth.json --type kubernetes.io/dockerconfigjson
$ oc secrets link builder quay-registry

$ oc import-image myimage openshift/httpd --from=default-route-openshift-image-registry.apps.ocp4.example.com/openshift/httpd:2.4 --confirm

$ mkdir work11 ; cd work11 
$ git clone https://github.com/cprakash2118/repo02 
$ cd repo02 
$ DO modification on s2I 

$ oc new-app --name repo02-app --as-deployment-config myimage~https://github.com/cprakash2118/repo02


######################
Recap

###
Unit-01,GE-01 
Configuring the Classroom Environment

Must be having account on "github.com" & "quay.io".
$ lab-configure 
Provide your github account:
Provide your quay account:

Script provides and update in the file "/usr/local/etc/ocp4.config"
OCP_Cluster_MASTER_API_URL:
OCP_Cluster_User_Account:developer 
OCP_Cluster_User's_password:developer
OCP_NEXUS_SERVER:
OCP_MYSQL_SERVER: 

Once your "lab-configure" script completed then cat the file "/usr/local/etc/ocp4.config".

Fork below repository:-
https://github.com/RedHatTraining/DO288-apps

and git clone the same repo once it's available on your profile (few sec it takes to fork from original repo).
$ mkdir work ; cd work
$ source  /usr/local/etc/ocp4.config
$ git clone https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps
$ cd DO288-apps 
$ git branch 
* main 

NOte: 
- Login to your "github.com" and "quay.io" accounts.
- W.R.T github.com account, please generate token (From developer's account)
- Refer more details
  Appendix A
  Appendix B
  Appendix C 
  
 


###
Unit-01,GE-02 
Deploying an Application to an OpenShift Cluster
lab docker-build start
Reference point - Deploy application using "--as-deployment-config , imageStream (is), --context-dir "
oc new-app --name echo  https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps#docker-build --context-dir ubi-echo

NOte: Branch name - #docker-build

 

###
Unit-01,GE-03
Managing an Application with the Web Console

$ oc whoami --show-console 
developer/developer
admin/redhat 

$ ssh root@utility 
$ cd /home/lab/ocp4/auth/
$ scp -r kube* student@workstation:/home/student/
Password: student 
$ exit
$ pwd
/home/student 
$ cat kubeadmin-password 
$ cat kubeconfig | grep server 
Note: OCP cluster master API URL.

$ oc get nodes --kubeconfig /home/student/kubeconfig 
$ export KUBECONFIG=/home/student/kubeconfig 
$ oc whoami ; oc get nodes 
$ env | grep KUBECONFIG
$ unset KUBECONFIG  (This will remove KUBECONFIG variable the user will not be able to use oc API).

###
Unit-01,GE-04
Managing an Application with the CLI

note: After deploying applications, user/admin can verify using logs and events 

$ oc get pods 
$ oc get svc or oc get service  

$ oc get dc or oc get deploymentconfig 
$ oc get deployment 
NOte: *** 
- Either dc or deployment (Not both)
- ALl changes to pod via deploying or dc only.
  Deployment used then "replicaSet" resource will be used to manage the pods.
  DeploymentConfig used then "replication controller" resource will be used to manage the pods.
  dc will sycn with bc and provide you simple/custom CI/CD.
  CI part handled by BuildCOnfig 
  CD part handled by DeploymentConfig
  
  
$ oc logs -f bc/bc_name (GIves your build time logs)
$ oc logs pod_name (build pod name - It will be in "completed" state).

$ oc get events (Incase if pods are going in pending state).



##
Unit-01,LE-01 
Deploying and Managing Applications on an OpenShift Cluster

##################################
https://access.redhat.com/documentation/en-us/openshift_container_platform/4.10
###
Unit-02,GE-01 
Building Container Images with Advanced Containerfile Instructions

 lab container-build start
 source /usr/local/etc/ocp4.config
 cd DO288-apps
 git checkout main
 git checkout -b container-build
  git push -u origin container-build
  
  oc new-project ${RHT_OCP4_DEV_USER}-container-build

cd ~/DO288-apps/conatiner-build/
podman build --layers=false -t do288-apache ./container-build
podman images
 podman tag do288-apache  quay.io/${RHT_OCP4_QUAY_USER}/do288-apache
 podman login quay.io -u ${RHT_OCP4_QUAY_USER}
 
  podman push --format v2s1 quay.io/${RHT_OCP4_QUAY_USER}/do288-apache

- Log into Quay.io [https://quay.io] and make the new image public
- Deploy the Apache HTTP Server child image
oc new-app --name hola quay.io/${RHT_OCP4_QUAY_USER}/do288-apache
oc get pods
oc logs pod<tab>


Because OpenShift runs containers using a random userid, ports below 1024 are
privileged and can only be run as root.
The random userid used by OpenShift to run the container does not have permissions
to read and write log files in /var/log/httpd (the default log file location for the
Apache HTTP Server on RHEL 7)



NOw delete all and recommit the COntainerfile 

oc delete all -l app=hola

vim COntainerfile 

EXPOSE 8080
LABEL io.openshift.expose-services="8080:http"
LABEL io.k8s.description="A basic Apache HTTP Server child image, uses ONBUILD" \
 io.k8s.display-name="Apache HTTP Server" \
 io.openshift.expose-services="8080:http" \
 io.openshift.tags="apache, httpd"
 
 RUN sed -i "s/Listen 80/Listen 8080/g" /etc/httpd/conf/httpd.conf
RUN sed -i "s/#ServerName www.example.com:80/ServerName 0.0.0.0:8080/g"  /etc/httpd/conf/httpd.conf

RUN chgrp -R 0 /var/log/httpd /var/run/httpd && \
    chmod -R g=u /var/log/httpd /var/run/httpd

USER 1001

git commit -a -m "Changed the Containerfile to enable running as a random uid on OpenShift"

podman rmi -a --force

podman build --layers=false -t do288-apache ./container-build


 podman tag do288-apache quay.io/${RHT_OCP4_QUAY_USER}/do288-apache

 podman push --format v2s1 quay.io/${RHT_OCP4_QUAY_USER}/do288-apache


oc new-app --name hola quay.io/${RHT_OCP4_QUAY_USER}/do288-apache
###########

$ cat ${XDG_RUNTIME_DIR}/containers/auth.json

$ oc create secret generic quay-registry --from-file .dockerconfigjson=${XDG_RUNTIME_DIR}/containers/auth.json --type kubernetes.io/dockerconfigjson
$ oc secrets link builder quay-registry

$ oc import-image myimage cprakash2118/do288-apache  --from=quay.io/cprakash2118/do288-apache --reference-policy local --confirm

$ oc new-app --name hola-02 -i myimage
############

$ oc get is 
$ oc get istag 



oc import-image myimage cprakash2118/do288-apache --reference-policy local --from=quay.io/cprakash2118/do288-apache --confirm



oc expose --port='8080' svc/hola

################
Unit2-GE02
Injecting Configuration Data into an Application

git checkout -b app-config


 oc new-project ${RHT_OCP4_DEV_USER}-app-config
 
 oc new-app --name myapp --build-env npm_config_registry=http://${RHT_OCP4_NEXUS_SERVER}/repository/nodejs nodejs:16-ubi8~https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps#app-config --context-dir app-config



 oc create configmap myappconf --from-literal APP_MSG="Test Message"
 
 oc create secret generic myappfilesec --from-file /home/student/DO288-apps/app-config/myapp.sec


###################
quay.io 
registry.redhat.io --> catalog.redhat.com  
registry.access.redhat.com --> catalog.redhat.com  


Unit-03-G1 

UNIT-03-GE2
 oc patch config.imageregistry cluster -n openshift-image-registry --type merge -p '{"spec":{"defaultRoute":true}}'


 oc patch config.imageregistry cluster -n openshift-image-registry --type merge -p '{"spec":{"defaultRoute":false}}'
 
####################################
Part 1-
  user1-5   (sre_team - sre_team_identity_provider, sre_team_secret)
  user6-10  (devops_team - devops_team_identity_provider, devops_team_secret)
  user11-30 (application-01_team - application-01_team_identity_provide, application-01_team_secret)
  user31-50 (application-02_team - application-02_team_identity_provider, application-02_team_secret)
  user51-70 (application-03_team - application-03_team_identity_provider, application-03_team_secret)
  
Part 2-
  groups:-
  sre_team_grp   - user1-5
  devops_team_grp  - user6-10 
  application-01_team_grp - user11-30
  application-02_team_grp - user31-50
  application-03_team_grp - user51-71

Part 3-  
  Setup and implement RBAC 
  1) Assigned "cluster-admin" role to sre_team_grp
  2) Delete kubeadmin account (delete kube:admin secret) - kube-system (namespace) 
  3) self-provisioner remove from groups (system-authenticated-oauth)
     NOte: By default all users part of this group (system-authenticated-oauth)
  4) Assign "self-provisioner" to "devops_team_grp" 
  5) Assigned "cluster-admin" role to user6 and user10 
  6) Project creation.
  
Part 4-  
  sre_team_project                 (cluster-admin) 
  devops_team_project              (self-provisioner
  application-01_team_project      (user11/12/13 - project admin, user14-25 - Edit, user26-30 View)
  application-02_team_project      (user31/32/33 - project admin, user34-45 - Edit, user46-50 View)
  application-03_team_project      (user51/52/53 - project admin, user54-65 - Edit, user66-70 View)
  

Part 5- Deploy application as per below details.

    Project name = application-01_team_project     
	Application Name mysql 
	Image used: registry.redhat.io/rhel8/mysql-80:1
	Environemnt variables as  (MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, MYSQL_HOSTNAME)
	user=myuser      
	password=redhat123 
	database=test_secrets 
	hostname=mysql
	
	HInt : --prefix MYSQL_ - use when deploying secret.
	
	Application Name: quote
	IMage used : quay.io/redhattraining/famous-quotes:2.1 
	Samilar environment as mysql 

Part 6) 

6.1)
Managing network communication from a pod to a service.
 application-01_team_project 
 pod 1 - quay.io/cprakash2118/april-java-unzip-httpd-image-02
 pod 2 - quay.io/cprakash2118/april-java-unzip-httpd-image-02
 pod 3 - quay.io/cprakash2118/april-java-unzip-httpd-image-02
 Create route (insecure route) and check load balancing.
=============================
6.2)
Managing communication between containers that run in the same project.

 - Deny policy 
 - Allow to specific 
 
 application-02_team_project 
 pod 1 - quay.io/cprakash2118/april-java-unzip-httpd-image-02
 pod 2 - quay.io/cprakash2118/april-java-unzip-httpd-image-02
 


6.3)
 Managing communication between pods, whether they belong to a same project or run in separate projects.
 - Deny policy 
 - Allow to specific 
 
application-02_team_project 
 pod 1 - quay.io/cprakash2118/april-java-unzip-httpd-image-02
 pod 2 - quay.io/cprakash2118/april-java-unzip-httpd-image-02
 
application-03_team_project 
 pod 3 - quay.io/cprakash2118/april-java-unzip-httpd-image-02


6.4)
 Managing network communication from an external network to a service, or from containers to external networks.
 
 route_project 
 Deploy application and setup on route (edge).
  quay.io/cprakash2118/april-java-unzip-httpd-image-02

 Deploy application and setup on route (passthrogh).
  quay.io/cprakash2118/april-java-unzip-httpd-image-02
  
   Deploy application and setup on route (Re-encryption).
  quay.io/cprakash2118/april-java-unzip-httpd-image-02
  

Part 7) 
Apply taint (NoSchduler action) on master01/02 
Apply label (env=prod) on project-03 and master03 

Application Name mysql 
	Image used: registry.redhat.io/rhel8/mysql-80:1
	Environemnt variables as  (MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, MYSQL_HOSTNAME)
	user=myuser      
	password=redhat123 
	database=test_secrets 
	hostname=mysql
	
	HInt : --prefix MYSQL_ - use when deploying secret.
	
	Application Name: quote
	IMage used : quay.io/redhattraining/famous-quotes:2.1 
	Samilar environment as mysql 
	

Part 8) 
application-01_team_project  
- Set quota "quota-01" (pod=10,service=3,secret=10,CPU=2core,Memory=2Gi)
- Set limit (cpu-max=400m,min=100m | memoery-max=400Mi,min=100Mi, Defult-Request CPU=150m,Memory=150Mi)

Application Name mysql 
	Image used: registry.redhat.io/rhel8/mysql-80:1
	Environemnt variables as  (MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, MYSQL_HOSTNAME)
	user=myuser      
	password=redhat123 
	database=test_secrets 
	hostname=mysql
	
	HInt : --prefix MYSQL_ - use when deploying secret.
	
	Application Name: quote
	IMage used : quay.io/redhattraining/famous-quotes:2.1 
	Samilar environment as mysql 
	
  - Verify RBAC 

application-02_team_project  - 
- Set quota "quota-02" (pod=6,service=3,secret=10,CPU=1core,Memory=2Gi)
- Set limit (cpu-max=300m,min=100m | memoery-max=400Mi,min=100Mi)


Application Name mysql 
	Image used: registry.redhat.io/rhel8/mysql-80:1
	Environemnt variables as  (MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, MYSQL_HOSTNAME)
	user=myuser      
	password=redhat123 
	database=test_secrets 
	hostname=mysql
	
	HInt : --prefix MYSQL_ - use when deploying secret.
	
	Application Name: quote
	IMage used : quay.io/redhattraining/famous-quotes:2.1 
	Samilar environment as mysql 
	
  - Verify RBAC 
  ================







 
 
 
 
 
 
  
  
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 