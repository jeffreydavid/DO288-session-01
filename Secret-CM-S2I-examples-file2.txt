https://rhtapps.redhat.com/individualexamscheduler

#######################
#####Case-01
Deploying application from image directly, including "secret" or "configmap" concepts.

##Creating project/namespace as below.
$ oc new-project project-01-mysql-quotes-app 

##Creating Secret with a name "mysql" and passing important variable which are required to run the mysql DB.
$ oc create secret generic mysql --from-literal user=myuser --from-literal password=redhat123 --from-literal database=test_secrets --from-literal hostname=mysql
 
## Now deploy database, it must be failed as required runtime values as a arguments.
$ oc new-app --name mysql --image registry.redhat.io/rhel8/mysql-80:1
 
## Now deploy the secret and mysql pod will be in running mode.
$ oc set env deployment/mysql --from secret/mysql --prefix MYSQL_

## You can mount the secret to a volume.
$ oc set volume deployment/mysql --add --type secret --mount-path /run/secrets/mysql --secret-name mysql
 
## NOw delpoying application which will connect to our database.
$ oc new-app --name quotes --image quay.io/redhattraining/famous-quotes:2.1

## Again it failed, as it required few arguments to start and connect DB.
$ oc set env deployment/quotes --from secret/mysql --prefix QUOTES_

## Get your pods 
$ oc get pods

## Access the application "quotes" from outside OCP cluster.
$ oc expose svc quotes 
$ oc get route 


#######################
Case-02

. Open internal registry to outside of cluster

- it should be accessible to outside of openshift cluster ( create route )
- privileges are already given for this task
- once it is exposed with podman command you should be able to pull an image from a specific project.


$ oc patch configs.imageregistry.operator.openshift.io/cluster --type merge -p   '{"spec":{"defaultRoute":true}}'
$

$ oc get route -n  openshift-image-registry

#
# podman login -u ocpdevop -p `oc whoami -t` <registry_route_name>
# podman pull <registry_route_name>/<project_name>/<image_name> --tls-verify=false
# podman images (check the images)



########################
S2I customization example (Step by Steps):-

lab apache-s2i start (Creating this dir - ~/DO288/lab/apache-s2i).
- ~/DO288/lab/apache-s2i/Containerfile
- ~/DO288/lab/apache-s2i/s2i 

Step 1) 
$ s2i create s2i-base-image-httpd s2i-base-image-httpd 
$ ls -ld s2i-base-image-httpd
$ tree s2i-base-image-httpd

Note: modification on Containerfile and your customization (w.r.t s2i directory also).
$ cp -rpv ~/DO288/labs/apache-s2i/Containerfile s2i-base-image-httpd/
$ cp -rv ~/DO288/labs/apache-s2i/s2i s2i-base-image-httpd/
$ mv ~/s2i-base-image-httpd/s2i/bin/save-artifacts /tmp/


Step2) 
podman build 

$ cd ~/s2i-base-image-httpd
$ podman build -t s2i-base-image-httpd .
$ podman images 
$ cat ~/s2i-base-image-httpd/test/test-app/index.html 

$ mkdir /home/student/s2i-sample-app/
$ pwd
/home/student/s2i-base-image-httpd

$ cp ~/DO288/labs/apache-s2i/index.html  ~/s2i-base-image-httpd/test/test-app/

s2i build test/test-app/ s2i-base-image-httpd s2i-sample-app --as-dockerfile=/home/student/s2i-sample-app/Containerfile

NOte: This file "~/s2i-sample-app/Containerfile" will be generated as per changes done "s2i-base-image-httpd" and then s2i deployed as per sample image "s2i-sample-app"

$ cd
$ pwd
/home/student 
$ tree s2i-sample-app
$ tree s2i-base-image-httpd

$ cd /home/student/s2i-sample-app/
$ podman build -t s2i-sample-app .
$ podman images 

Note: New image "s2i-sample-app" having parent image "s2i-base-image-httpd".

$ podman run -d --name test -u 1234 -p 8080:8080 localhost/s2i-sample-app
$ ps 
$ curl http://localhost:8080


###
Push this images and implement the same on OCP cluster.
$ source /usr/local/etc/ocp4.config

$ podman login -u ${RHT_OCP4_QUAY_USER} quay.io

$ podman images

$ skopeo copy --format v2s1 containers-storage:localhost/s2i-base-image-httpd docker://quay.io/${RHT_OCP4_QUAY_USER}/s2i-do288-httpd


$ oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
 
$ oc new-project ${RHT_OCP4_DEV_USER}-apache-s2i

$ oc create secret generic quayio --from-file .dockerconfigjson=${XDG_RUNTIME_DIR}/containers/auth.json  --type=kubernetes.io/dockerconfigjson

$ oc secrets link builder quayio

$ oc import-image s2i-do288-httpd --from quay.io/${RHT_OCP4_QUAY_USER}/s2i-do288-httpd --confirm

$ oc get is 

$ oc new-app --name hello-s2i s2i-do288-httpd~https://github.com/${RHT_OCP4_GITHUB_USER}/DO288-apps --context-dir=html-helloworld

$  oc logs -f bc/hello-s2i

$ oc get route 

